import { Request, Response } from 'express';
import { Image } from '../models/Image.ts';
import {Project} from '../models/Project.ts'
import {getUserImageStorage }  from '../utils/storageUtils.ts'
// Get latest generated Image
export const getLatestGeneratedImages = async (req: Request, res: Response) => {
    try {
        const user = req.user;
        const page = parseInt(req?.query?.page as string) || 1;
        const limit = 4;
        const skip = (page - 1) * limit;
        const images = await Image.find({ user: user._id })
            .sort({ generatedAt: -1 })
            .skip(skip)
            .limit(limit)
            .exec();

        if (!images.length) {
            return res.status(404).json({ message: 'No images found' });
        }

        res.status(200).json(images);
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
};

// Endpoint to fetch startcarddata
export const getStartCardData = async (req: Request, res: Response) => {
    try {
      const user = req.user;
  
      // Fetch the number of images generated by the user
    const totalImagesGenerated = await Image.countDocuments({ user: user._id });
    const startOfDay = new Date();
    startOfDay.setHours(0, 0, 0, 0);
    const totalImagesGeneratedToday = await Image.countDocuments({ user: user._id, generatedAt: { $gte: startOfDay } });
    const totalInProgressProjects = await Project.countDocuments({ user: user._id, status: 'in-progress' });
    // Fetch storage usage
    const { total100MB, percentageOf100MB } = await getUserImageStorage(user._id);
  
      // Prepare startcarddata
      const startcarddata = [
        { title: "Images Generated", value: totalImagesGenerated.toString(), percentageChange: `${totalImagesGeneratedToday}+`},
        { title: "API Credits", value: user.subscription.creditsRemaining.toString(), percentageChange:user.subscription.tier, color: "green" },
        { title: "Projects", value: totalInProgressProjects, percentageChange: "active", color: "red" },
        { title: "Storage Use", value: `${total100MB}MB`, percentageChange: `${percentageOf100MB}%`, color: "yellow" },
      ];
  
      // Return the startcarddata
      res.status(200).json(startcarddata);
    } catch (error) {
      console.error('Error fetching startcarddata:', error);
      res.status(500).json({ message: 'Server error', error });
    }
  };